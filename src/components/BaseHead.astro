---
// Import the global.css file here so that it is included on
// all pages through the use of the <BaseHead /> component.
import '../styles/global.css';

interface Props {
    title: string;
    description: string;
    image?: string;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const {title, description, image = '/blog-placeholder-1.jpg'} = Astro.props;
---

<!-- Global Metadata -->
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width,initial-scale=1"/>
<link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
<link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
<link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
<link rel="manifest" href="/site.webmanifest">
<meta name="generator" content={Astro.generator}/>

<!-- Font preloads -->
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Atkinson+Hyperlegible:ital,wght@0,400;0,700;1,400;1,700&display=swap"
      rel="stylesheet">

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL}/>

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title}/>
<meta name="description" content={description}/>

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website"/>
<meta property="og:url" content={Astro.url}/>
<meta property="og:title" content={title}/>
<meta property="og:description" content={description}/>
<meta property="og:image" content={new URL(image, Astro.url)}/>

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image"/>
<meta property="twitter:url" content={Astro.url}/>
<meta property="twitter:title" content={title}/>
<meta property="twitter:description" content={description}/>
<meta property="twitter:image" content={new URL(image, Astro.url)}/>

<script is:inline>

  function setTheme(document) {
    let theme = checkTheme()
    
    if(theme === 'dark') {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
  }

  function checkTheme() {
    if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
      return localStorage.getItem('theme');
    }

    if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
      return 'dark';
    }
    return 'light';
  }

  setTheme(document)
  document.addEventListener('astro:before-swap', ev => {
    setTheme(ev.newDocument)
  });

</script>
